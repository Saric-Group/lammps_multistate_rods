# The config file defines the model. It has a number of parameters that can be set.

# Syntactically, the contents can be any valid ONE LINE python code (so comments, empty lines etc.
# are OK, as is a semicolon followed by whatever code you like, so not very hacker proof...).
# However, only variables of certain exact names have a direct effect, everything else is just
# auxiliary (like variables to hold values, e.g. SS in the example).
# MULTIPLE LINE code is possible only if the line ends with a comma (,)!

# Here all such variables/parameters are listed along with their default values.
# Some, however, are OBLIGATORY, namely: "rod_states"; "state_structures" elements; "patch_angles",
# "patch_bead_radii" and "patch_bead_sep" (if there are 1 or more patches); "int_types";
# "eps" elements; "trans_penalty" elements (if there are 2 or more states)

# POSSIBLE ROD (GEOMETRIC) PROPERTIES

rod_radius = 1.0
rod_length = 8.0*rod_radius
rod_mass = 1.0

rod_states = ('soluble_state', 'beta_state')
state_structures[0] = '1-1-1-1-1-1-2|3-3-3-3'
state_structures[1] = '1-1-1-1-1-1-1|4-4-4-4'

patch_angles = (0.0,)
patch_bead_radii = (0.25*rod_radius,)
patch_bead_sep = (0.9*rod_radius,)
patch_bulge_out = 0.0 # can be a k-tuple; if it's a single value it applies the same to all patches

# POSSIBLE INTERACTIONS

# The 'int_types' parameter has to be given as a dictionary with keys being labels to be used later
# (e.g. in "eps") and the values being one of the following:
#   - ('lj/cut', <range>)
#   - ('cosine/squared', <range>, <opt "wca">) {"wca" is optional}
#   - ('nm/cut', <n>, <m>, <range>)
#   - ('morse', <a>, <range>) {where "a" is the width parameter of the Morse potential, e.g. 2.5/rod_radius}
#   - ('gauss/cut', <std_dev>, <range>) {where "std_dev" is the standard deviation parameter of the gaussian, e.g. 0.5*rod_radius}
#
# NOTES:
#  - the <range> parameter gives the cutoff distance from the particle (bead) surfaces (defined by their radius),
#     not their centers
#  - "vx" (without quotation marks) is a reserved key denoting passive (volume-exclusion) interaction,
#    beads that have only that kind of interaction will not be considered "active" beads
#  - if vx is not given it will default to ('lj/cut', 0.0) with a WARNING message

int_types = {'patch' : ('lj/cut', 1.75*rod_radius),
             'tip' : ('lj/cut', 0.6*rod_radius),
              vx : ('lj/cut', 0.0)}

# auxiliary variables (won't have direct effect)
VX = 5.0
SS = 6.0
SB = 7.5
BB = 30.0
D_mu = 20.0

# The 'eps' is a dictionary of interactions between bead types: (strength, int_type entry)
# NOTE: all bead type pairs not specified will be assigned zero interaction, i.e. (0.0, vx)

eps[(1,1)] = eps[(1,2)] = (VX, vx) # body volume exclusion
eps[(2,2)] = (SS, 'tip') # soluble-soluble interaction
eps[(2,4)] = (SB, 'patch') # soluble-beta interaction
eps[(4,4)] = (BB, 'patch') # beta-beta interaction

# "trans_penalty" is assumed to be an antisymmetric matrix and is automatically filled as such
# for every value not given explicitly

trans_penalty[(0,1)] = D_mu # soluble-beta transition
trans_penalty[(1,0)] = -D_mu #this is unnecessary unless not antisym
