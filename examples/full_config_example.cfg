# Through the config file a number of parameters can be set. Here all allowed possibilities
# are listed, anything else will trigger an Exception being thrown.
# Not all parameters have to be given explicitly, all those that are not set explicitly
# will assume their default values (they are the same as in this example - for reference).
# Some, however, are OBLIGATORY, namely: "rod_states", "state_structure" elements, "int_type",
# "vol_exclusion" and "eps" elements (and "trans_penalty" elements if you have multiple states)

# Syntactically, the contents can be any valid python code (so comments, empty lines etc. are OK, as is a
# semicolon followed by whatever code you like, so not very hacker proof...)

# POSSIBLE ROD (GEOMETRIC) PROPERTIES

rod_states = ('base_state', 'beta_state')
state_structures[1] = '1111111|444444'
state_structures[0] = '1111112|333333'
rod_radius = 1.0
body_bead_overlap = 1.0*rod_radius
int_radius = 0.5*rod_radius
int_bead_overlap = 0.0
int_bulge_out = 0.1*rod_radius
rod_mass = 1.0

# POSSIBLE INTERACTION PROPERTIES

# The 'int_type' parameter has to be given as a tuple (or a list) with the name of a valid LAMMPS
# "pair_style" listed first and its parameters following.
# The following values are currently supported:
#   - ('lj/cut', None)
#   - ('nm/cut', n, m) {where "n" and "m" are integer powers of the repulsive and attractive parts, respectively}
#   - ('morse', a) {where "a" is the width parameters of the Morse potential, e.g. 2.5/rod_radius}
#   - ('gauss/cut', std_dev) {where "std_dev" is the standard deviation parameter of the gaussian, e.g. 0.5*rod_radius}

int_type = ('morse', 2.5/rod_radius)
vol_exclusion = 10.0 #the strength of the volume exclusion interaction, the "hardness" of the beads
int_range = 1.5*rod_radius #the separation between bead boundaries at which interaction vanishes)
global_cutoff = 3.0*rod_radius

# If the value of "eps" is set to "vx" that means that it will use the "vol_exclusion" parameter
# for the strength of the interaction and the cutoff will be set to the minimum of the interaction.

eps[(1,1)] = eps[(1,2)] = eps[(1,3)] = eps[(1,4)] = vx
eps[(2,3)] = eps[(3,3)] = eps[(3,4)] = vx
eps[(2,2)] = 5.5 # base-base interaction
eps[(2,4)] = 5.75 # base-beta interaction
eps[(4,4)] = 6.0 # beta-beta interaction

# Since "trans_penalty" is an antisymmetric matrix only one value for a pair of states has to be given,
# the other will be set automatically according to the antisymmetric property

trans_penalty[(0,1)] = 15.0 # base-beta transition

