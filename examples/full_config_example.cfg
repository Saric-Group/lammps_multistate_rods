# Through the config file a number of parameters can be set. Here all allowed possibilities
# are listed, anything else will trigger an Exception being thrown.
# Not all parameters have to be given explicitly, all those that are not set explicitly
# will assume their default values (they are the same as in this example - for reference).
# Some, however, are OBLIGATORY, namely: "rod_states", "state_structure" elements, "int_type",
# "vol_exclusion" and "eps" elements (and "trans_penalty" elements if you have multiple states)

# Syntactically, the contents can be any valid ONE LINE python code (so comments, empty lines etc.
# are OK, as is a semicolon followed by whatever code you like, so not very hacker proof...).
# MULTIPLE LINE code is possible only if the line ends with a comma (,).

# POSSIBLE ROD (GEOMETRIC) PROPERTIES

rod_states = ('soluble_state', 'beta_state')
state_structures[1] = '111111|444'
state_structures[0] = '111112|333'
rod_radius = 1.0
body_bead_overlap = 0.8*rod_radius
int_radius = 0.25*rod_radius
int_bead_overlap = -7.6*int_radius
int_bulge_out = 0.0
rod_mass = 1.0

# POSSIBLE INTERACTIONS

# The 'int_type' parameter has to be given as a dictionary with keys being labels to be used later (e.g. in "eps")
# and the values being one of the following:
#   - ('lj/cut', <range>)
#   - ('cosine/squared', <range>, <opt "wca">) {"wca" is optional}
#   - ('nm/cut', <n>, <m>, <range>)
#   - ('morse', <a>, <range>) {where "a" is the width parameter of the Morse potential, e.g. 2.5/rod_radius}
#   - ('gauss/cut', <std_dev>, <range>) {where "std_dev" is the standard deviation parameter of the gaussian, e.g. 0.5*rod_radius}
#
# NOTES:
#  - the <range> parameter gives the cutoff distance from the particle (bead) surfaces, not their centers
#  - "vx" (with or without quotation marks) is a reserved key denoting passive (volume-exclusion) interaction,
#    beads that have only that kind of interaction will not be considered "active" beads

int_types = {'patch' : ('cosine/squared', 1.75*rod_radius),
             'tip' : ('cosine/squared', 1.0*rod_radius, 'wca'),
             vx : ('lj/cut', 0.0)}

# interactions between bead types: (strength, int_type entry)

eps[(1,1)] = eps[(1,2)] = eps[(1,3)] = eps[(1,4)] = (5.0, vx)
eps[(2,3)] = eps[(3,3)] = eps[(3,4)] = (5.0, vx)
eps[(2,2)] = (3.25, 'tip') # soluble-soluble tip interaction
eps[(2,4)] = (6.5, 'patch') # soluble-beta interaction
eps[(4,4)] = (30.0, 'patch') # beta-beta interaction

# Since "trans_penalty" is an antisymmetric matrix only one value for a pair of states has to be given,
# the other will be set automatically according to the antisymmetric property

trans_penalty[(0,1)] = 15.0 # soluble-beta transition

